name: Website CD

on:
  schedule:
    - cron: '0 16 * * *'  # 3am Sydney time (UTC+11)
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: true

permissions:
  contents: write  #<-- to allow push changes to the repository
  pages: write     #<-- to deploy to Pages
  id-token: write  #<-- to verify the deployment originates from an appropriate source

jobs:

  deploy-docs:

    name: Deploy Docs
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deploy-pages.outputs.page_url }}

    steps:

      - name: Checkout repository
        id: checkout-repository
        uses: actions/checkout@v4
        with:
          ref: docs-site
          fetch-depth: 5
          show-progress: true
          set-safe-directory: false

      - name: Setup Pages
        id: setup-pages
        uses: actions/configure-pages@v5
  
      - name: Setup Git
        id: setup-git
        env:
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Add submodules
        id: add-submodules
        env:
          REPOS: ${{ vars.REPOS }}
        run: |
          # Debug
          echo "REPOS: ${REPOS}"

          # Loop through each repo
          echo "${REPOS}" | while IFS= read -r line; do

            # Extract the variables
            read -r REPO BRANCH <<< "${line}"
            REPO_NAME=$(basename -s .git "${REPO}")
            BRANCH=$(echo "${BRANCH}" | tr -d '\r' | tr -d '\n' | xargs)  # Trim any leading/trailing whitespace and remove carriage return and newline
            echo "--> Cloning branch '${BRANCH}' from '${REPO_NAME}': ${REPO}"

            # Clone the repo to a temporary directory
            git clone --single-branch --branch "${BRANCH}" "${REPO}" "/tmp/${REPO_NAME}"

            # Copy contents to the desired location in the current repo
            cp --recursive --update "/tmp/${REPO_NAME}/." "./${REPO_NAME}"

            # Remove the temporary directory
            rm --recursive --force "/tmp/${REPO_NAME}"

            # Add the changes to git
            git add "./${REPO_NAME}"

            # Commit the changes
            git commit -m "Updated files from \`${REPO_NAME}\` (branch: \`${BRANCH}\`) [skip ci]" || echo "--> No changes to commit"

          done

          # Push the changes
          git push origin docs-site || echo "No changes to push"

      - name: Add CNAME
        id: add-cname
        run: |
          if [ -f CNAME ]; then rm CNAME; fi;
          echo "${CNAME_URL}" > CNAME
          git add CNAME
          git commit -m "Update CNAME file [skip ci]" || echo "No changes to commit"
          git push origin docs-site || echo "No changes to push"
        env:
          CNAME_URL: ${{ vars.CNAME_URL }}

      - name: Upload artifacts
        id: upload-artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          name: web
          path: '.' #<-- All files in the branch
          retention-days: 1

      - name: Deploy Pages
        uses: actions/deploy-pages@v4
        id: deploy-pages
        with:
          artifact_name: web
