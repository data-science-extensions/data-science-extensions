name: CD for Releases

on:
  # Only trigger when release is published
  release:
    types:
      - published
  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:

  debug:

    name: Run Debugging
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Check variables
        run: |
          echo "github.action: ${{ github.action }}"
          echo "github.action_path: ${{ github.action_path }}"
          echo "github.action_ref: ${{ github.action_ref }}"
          echo "github.action_repository: ${{ github.action_repository }}"
          echo "github.action_status: ${{ github.action_status }}"
          echo "github.actor: ${{ github.actor }}"
          echo "github.actor_id: ${{ github.actor_id }}"
          echo "github.api_url: ${{ github.api_url }}"
          echo "github.base_ref: ${{ github.base_ref }}"
          echo "github.env: ${{ github.env }}"
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.event_path: ${{ github.event_path }}"
          echo "github.graphql_url: ${{ github.graphql_url }}"
          echo "github.head_ref: ${{ github.head_ref }}"
          echo "github.job: ${{ github.job }}"
          echo "github.job_workflow_sha: ${{ github.job_workflow_sha }}"
          echo "github.path: ${{ github.path }}"
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.ref_protected: ${{ github.ref_protected }}"
          echo "github.ref_type: ${{ github.ref_type }}"
          echo "github.repository: ${{ github.repository }}"
          echo "github.repository_id: ${{ github.repository_id }}"
          echo "github.repository_owner: ${{ github.repository_owner }}"
          echo "github.repository_owner_id: ${{ github.repository_owner_id }}"
          echo "github.repositoryUrl: ${{ github.repositoryUrl }}"
          echo "github.retention_days: ${{ github.retention_days }}"
          echo "github.run_attempt: ${{ github.run_attempt }}"
          echo "github.run_id: ${{ github.run_id }}"
          echo "github.run_number: ${{ github.run_number }}"
          echo "github.secret_source: ${{ github.secret_source }}"
          echo "github.server_url: ${{ github.server_url }}"
          echo "github.sha: ${{ github.sha }}"
          # echo "github.token: ${{ github.token }}"
          echo "github.triggering_actor: ${{ github.triggering_actor }}"
          echo "github.workflow: ${{ github.workflow }}"
          echo "github.workflow_ref: ${{ github.workflow_ref }}"
          echo "github.workflow_sha: ${{ github.workflow_sha }}"
          echo "github.workspace: ${{ github.workspace }}"
          echo "github.event.action: ${{ github.event.action }}"
          echo "github.event.enterprise: ${{ github.event.enterprise }}"
          echo "github.event.organization: ${{ github.event.organization }}"
          echo "github.event.repository: ${{ github.event.repository }}"
          echo "github.event.sender: ${{ github.event.sender }}"
          echo "github.event.release.assets_url: ${{ github.event.release.assets_url }}"
          echo "github.event.release.author: ${{ github.event.release.author }}"
          echo "github.event.release.body: ${{ github.event.release.body }}"
          echo "github.event.release.created_at: ${{ github.event.release.created_at }}"
          echo "github.event.release.draft: ${{ github.event.release.draft }}"
          echo "github.event.release.html_url: ${{ github.event.release.html_url }}"
          echo "github.event.release.id: ${{ github.event.release.id }}"
          echo "github.event.release.name: ${{ github.event.release.name }}"
          echo "github.event.release.node_id: ${{ github.event.release.node_id }}"
          echo "github.event.release.prerelease: ${{ github.event.release.prerelease }}"
          echo "github.event.release.published_at: ${{ github.event.release.published_at }}"
          echo "github.event.release.tag_name: ${{ github.event.release.tag_name }}"
          echo "github.event.release.tarball_url: ${{ github.event.release.tarball_url }}"
          echo "github.event.release.target_commitish: ${{ github.event.release.target_commitish }}"
          echo "github.event.release.upload_url: ${{ github.event.release.upload_url }}"
          echo "github.event.release.url: ${{ github.event.release.url }}"
          echo "github.event.release.zipball_url: ${{ github.event.release.zipball_url }}"

      - name: Check Git
        run: |
          git status
          git branch

  build-docs:

    name: Build Docs
    runs-on: ubuntu-latest

    permissions:
      contents: write  #<-- to allow mike to push to the repository

    steps:

      - name: Checkout repository
        id: checkout-repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install UV
        id: install-uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv self update

      - name: Install dependencies
        id: install-dependencies
        run: uv sync --link-mode=copy --no-cache --all-groups

      - name: Setup Git
        id: setup-git
        env:
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -B main --track origin/main
          git remote update
          git fetch --verbose
          git fetch --verbose --tags
          git pull --verbose
          git status --verbose
          git branch --list --verbose
          git tag --list --sort=-creatordate

      - name: Bump Version
        id: bump-version
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          echo "Bumping version using tag: ${VERSION}"

          # Strip leading 'v' if it exists
          CLEAN_VERSION=${VERSION#v}
          echo "Clean version: ${CLEAN_VERSION}"

          # Update version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"${CLEAN_VERSION}\"/" pyproject.toml

          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to pyproject.toml, version was already set correctly"
          else
            # Add, commit and push changes
            git add pyproject.toml
            git commit -m "Bump version to \`${CLEAN_VERSION}\` [skip ci]"
            git push origin main
            echo "Version bumped to ${CLEAN_VERSION}"
          fi

      - name: Build Docs
        id: build-docs
        env:
          VERSION: ${{ github.event.release.tag_name }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          git config --global --list
          git config --local --list
          git remote --verbose
          uv run mike --debug deploy --update-aliases --branch=docs-site --push ${VERSION} latest
          uv run mike --debug set-default --branch=docs-site --push latest
